#!/bin/bash

# Claude Code Post-Edit Hook
# Validation and context updates after file modifications

set -e

FILE_PATH="$1"
EDIT_RESULT="$2"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
PROJECT_ROOT="/home/coder/convex-coder"

cd "$PROJECT_ROOT"

# Get current agent if one is active
CURRENT_AGENT=""
if [[ -f ".claude/current-agent" ]]; then
    CURRENT_AGENT=$(cat .claude/current-agent 2>/dev/null || echo "")
fi

echo "‚úÖ Post-edit validation for: $FILE_PATH"

# Log the edit
echo "[$TIMESTAMP] Post-edit: $FILE_PATH" >> .claude/edit-log.txt

# TypeScript validation after edit
validate_typescript_post_edit() {
    local file_path="$1"
    
    if [[ "$file_path" =~ \.(ts|tsx)$ ]]; then
        echo "üîç Running TypeScript validation..."
        
        if command -v npm >/dev/null 2>&1 && [[ -f "package.json" ]]; then
            # Run type check in background to not block workflow
            {
                if npm run typecheck >/dev/null 2>&1; then
                    echo "‚úÖ TypeScript validation passed"
                    if [[ -n "$CURRENT_AGENT" ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-effective-command "TypeScript edit successful" 2>/dev/null || true
                    fi
                else
                    echo "‚ùå TypeScript validation failed"
                    if [[ -n "$CURRENT_AGENT" ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-problematic-command "TypeScript errors after edit" 2>/dev/null || true
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Fix TypeScript errors in $(basename "$file_path")" 2>/dev/null || true
                    fi
                fi
            } &
        fi
    fi
}

# React component post-edit validation
validate_react_post_edit() {
    local file_path="$1"
    
    if [[ "$file_path" =~ components/.*\.(tsx|jsx)$ ]]; then
        echo "‚öõÔ∏è  React component modified"
        
        # Check for common React patterns
        if [[ -f "$file_path" ]]; then
            local file_content=$(cat "$file_path")
            
            # Check for proper exports
            if [[ "$file_content" =~ "export default" ]]; then
                echo "‚úÖ Component has default export"
            else
                echo "‚ö†Ô∏è  Component may be missing default export"
                if [[ -n "$CURRENT_AGENT" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Verify export pattern in $(basename "$file_path")" 2>/dev/null || true
                fi
            fi
            
            # Check for TypeScript types
            if [[ "$file_path" =~ \.tsx$ && ! "$file_content" =~ "interface|type" ]]; then
                echo "üí° Consider adding TypeScript interfaces for props"
                if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "react-convex-builder" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Component created without explicit types - consider adding" 2>/dev/null || true
                fi
            fi
            
            # Check for Convex integration
            if [[ "$file_content" =~ "useQuery|useMutation|useAction" ]]; then
                echo "üîÑ Component uses Convex hooks"
                if [[ -n "$CURRENT_AGENT" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Successfully integrated Convex hooks in component" 2>/dev/null || true
                fi
            fi
        fi
    fi
}

# Convex function post-edit validation
validate_convex_post_edit() {
    local file_path="$1"
    
    if [[ "$file_path" =~ ^convex/.*\.ts$ ]]; then
        echo "üîÑ Convex function modified"
        
        if [[ -f "$file_path" ]]; then
            local file_content=$(cat "$file_path")
            
            # Check for proper Convex patterns
            if [[ "$file_content" =~ "export.*=.*query|export.*=.*mutation|export.*=.*action" ]]; then
                echo "‚úÖ Convex function exports detected"
            else
                echo "üí° Ensure proper Convex function exports"
            fi
            
            # Check for schema imports
            if [[ "$file_content" =~ 'from.*"\.\/schema"' ]]; then
                echo "‚úÖ Schema import detected"
            elif [[ ! "$file_path" =~ "schema.ts" ]]; then
                echo "üí° Consider importing schema if using database operations"
            fi
            
            # Suggest function reload if dev server is running
            if pgrep -f "convex dev" >/dev/null; then
                echo "üîÑ Convex dev server detected - functions should reload automatically"
            else
                echo "‚ö†Ô∏è  Consider starting Convex dev server to test changes"
                if [[ -n "$CURRENT_AGENT" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Start Convex dev server to test function changes" 2>/dev/null || true
                fi
            fi
        fi
    fi
}

# Test file post-edit validation
validate_test_post_edit() {
    local file_path="$1"
    
    if [[ "$file_path" =~ test|spec|\.test\.|\.spec\. ]]; then
        echo "üß™ Test file modified"
        
        if [[ -f "$file_path" ]]; then
            local file_content=$(cat "$file_path")
            
            # Check for test structure
            if [[ "$file_content" =~ "test\(|it\(|describe\(" ]]; then
                echo "‚úÖ Test structure detected"
            else
                echo "üí° Ensure proper test structure with test/it/describe blocks"
            fi
            
            # Check for Playwright patterns
            if [[ "$file_content" =~ "page\.|expect\(.*page" ]]; then
                echo "üé≠ Playwright test patterns detected"
                if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "web-testing-specialist" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Created/modified Playwright test successfully" 2>/dev/null || true
                fi
            fi
            
            # Suggest running tests
            if command -v npm >/dev/null 2>&1; then
                echo "üí° Run 'npm test' to validate test changes"
                if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "web-testing-specialist" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Run tests to validate changes" 2>/dev/null || true
                fi
            fi
        fi
    fi
}

# Configuration file post-edit validation
validate_config_post_edit() {
    local file_path="$1"
    
    case "$file_path" in
        "package.json")
            echo "üì¶ Package.json modified"
            # Check JSON validity
            if python3 -m json.tool "$file_path" >/dev/null 2>&1; then
                echo "‚úÖ Valid JSON structure"
            else
                echo "‚ùå Invalid JSON in package.json"
                if [[ -n "$CURRENT_AGENT" ]]; then
                    ./scripts/update-context.sh "$CURRENT_AGENT" add-problematic-command "Invalid JSON in package.json" 2>/dev/null || true
                fi
                exit 1  # Block invalid JSON
            fi
            
            # Suggest npm install if dependencies changed
            echo "üí° Consider running 'npm install' if dependencies changed"
            ;;
            
        *"tsconfig.json")
            echo "üîß TypeScript config modified"
            # Validate JSON
            if python3 -m json.tool "$file_path" >/dev/null 2>&1; then
                echo "‚úÖ Valid TypeScript config"
            else
                echo "‚ùå Invalid TypeScript config"
                exit 1
            fi
            ;;
            
        *"playwright.config"*)
            echo "üé≠ Playwright config modified"
            if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "web-testing-specialist" ]]; then
                ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Modified Playwright configuration" 2>/dev/null || true
            fi
            ;;
    esac
}

# Agent context updates
update_agent_context_post_edit() {
    local file_path="$1"
    local edit_result="$2"
    
    if [[ -n "$CURRENT_AGENT" ]]; then
        # Record successful edit
        if [[ "$edit_result" =~ "success"|"Success"|"updated"|"created" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Successfully edited $(basename "$file_path")" 2>/dev/null || true
            
            # Agent-specific context updates
            case "$CURRENT_AGENT" in
                "react-convex-builder")
                    if [[ "$file_path" =~ components/ ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Component modification successful: $(basename "$file_path")" 2>/dev/null || true
                    fi
                    ;;
                "convex-function-generator")
                    if [[ "$file_path" =~ ^convex/ ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Convex function modification successful: $(basename "$file_path")" 2>/dev/null || true
                    fi
                    ;;
                "web-testing-specialist")
                    if [[ "$file_path" =~ test|spec ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Test file modification successful: $(basename "$file_path")" 2>/dev/null || true
                    fi
                    ;;
            esac
        else
            ./scripts/update-context.sh "$CURRENT_AGENT" add-problematic-command "Edit issues with $(basename "$file_path")" 2>/dev/null || true
        fi
    fi
}

# Automatic quality checks
run_quality_checks() {
    local file_path="$1"
    
    # Only run for source files
    if [[ "$file_path" =~ \.(ts|tsx|js|jsx)$ ]]; then
        echo "üîç Running quality checks..."
        
        # ESLint check if available
        if command -v npx >/dev/null 2>&1 && [[ -f ".eslintrc" || -f "eslint.config.mjs" ]]; then
            {
                if npx eslint "$file_path" >/dev/null 2>&1; then
                    echo "‚úÖ ESLint passed"
                    if [[ -n "$CURRENT_AGENT" ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Code follows linting standards" 2>/dev/null || true
                    fi
                else
                    echo "‚ö†Ô∏è  ESLint issues detected"
                    if [[ -n "$CURRENT_AGENT" ]]; then
                        ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Fix linting issues in $(basename "$file_path")" 2>/dev/null || true
                    fi
                fi
            } &
        fi
        
        # Prettier check if available
        if command -v npx >/dev/null 2>&1 && [[ -f ".prettierrc" || -f "prettier.config.js" ]]; then
            {
                if npx prettier --check "$file_path" >/dev/null 2>&1; then
                    echo "‚úÖ Code formatting is correct"
                else
                    echo "üí° Code could be formatted with Prettier"
                fi
            } &
        fi
    fi
}

# Project health monitoring
monitor_project_health() {
    # Track edit frequency
    local edit_count=$(tail -n 20 .claude/edit-log.txt | wc -l 2>/dev/null || echo "0")
    
    if [[ $edit_count -gt 15 ]]; then
        echo "üìä High edit activity detected - consider running comprehensive tests"
        if [[ -n "$CURRENT_AGENT" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Run comprehensive tests after high edit activity" 2>/dev/null || true
        fi
    fi
    
    # Check for pattern of rapid edits to same file
    local same_file_edits=$(grep "$(basename "$FILE_PATH")" .claude/edit-log.txt | tail -n 5 | wc -l)
    if [[ $same_file_edits -gt 3 ]]; then
        echo "üîÑ Multiple edits to same file - ensure changes are correct"
    fi
}

# Main post-edit flow
main() {
    local file_path="$1"
    local edit_result="$2"
    
    # Run all post-edit validations
    validate_typescript_post_edit "$file_path"
    validate_react_post_edit "$file_path"  
    validate_convex_post_edit "$file_path"
    validate_test_post_edit "$file_path"
    validate_config_post_edit "$file_path"
    
    # Update agent context
    update_agent_context_post_edit "$file_path" "$edit_result"
    
    # Run quality checks
    run_quality_checks "$file_path"
    
    # Monitor overall project health
    monitor_project_health
    
    echo "‚úÖ Post-edit validation completed for: $file_path"
}

# Run main validation
main "$FILE_PATH" "$EDIT_RESULT"

# Exit successfully
exit 0