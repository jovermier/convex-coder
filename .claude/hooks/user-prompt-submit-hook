#!/bin/bash

# Claude Code User Prompt Submit Hook
# Automatically manages agent sessions and context based on user prompts

set -e

USER_PROMPT="$1"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
PROJECT_ROOT="/home/coder/convex-coder"

cd "$PROJECT_ROOT"

# Log all user prompts for analysis
echo "[$TIMESTAMP] User prompt: $USER_PROMPT" >> .claude/session.log

# Agent command detection and session management
detect_agent_commands() {
    local prompt="$1"
    
    # Agent-specific commands
    if [[ "$prompt" =~ @test-comprehensive ]]; then
        echo "web-testing-specialist"
    elif [[ "$prompt" =~ @agent-orchestrate ]]; then
        echo "orchestrator"
    elif [[ "$prompt" =~ @feature-complete ]]; then
        echo "fullstack-feature-creator"
    elif [[ "$prompt" =~ @health-check ]]; then
        echo "performance-engineer"
    elif [[ "$prompt" =~ @visual-regression ]]; then
        echo "web-testing-specialist"
    # Generic agent work detection
    elif [[ "$prompt" =~ "schema"|"database"|"migration" ]]; then
        echo "convex-schema-manager"
    elif [[ "$prompt" =~ "component"|"react"|"ui" ]]; then
        echo "react-convex-builder"
    elif [[ "$prompt" =~ "function"|"mutation"|"query"|"convex" ]]; then
        echo "convex-function-generator"
    elif [[ "$prompt" =~ "auth"|"login"|"permission" ]]; then
        echo "convex-auth-specialist"
    elif [[ "$prompt" =~ "test"|"playwright"|"e2e"|"visual" ]]; then
        echo "web-testing-specialist"
    elif [[ "$prompt" =~ "performance"|"optimization"|"bundle" ]]; then
        echo "performance-engineer"
    fi
}

# Extract task description from prompt
extract_task_description() {
    local prompt="$1"
    
    # Remove agent commands and common prefixes
    local cleaned=$(echo "$prompt" | sed -E 's/@[a-z-]+//g' | sed -E 's/^(please|can you|help me|I need|implement|create|add|fix|update)//i' | xargs)
    
    # Limit length for context storage
    if [[ ${#cleaned} -gt 100 ]]; then
        cleaned="${cleaned:0:97}..."
    fi
    
    echo "$cleaned"
}

# Start agent session if agent work is detected
DETECTED_AGENT=$(detect_agent_commands "$USER_PROMPT")

if [[ -n "$DETECTED_AGENT" ]]; then
    TASK_DESC=$(extract_task_description "$USER_PROMPT")
    
    echo "ü§ñ Detected agent work: $DETECTED_AGENT"
    echo "üìã Task: $TASK_DESC"
    
    # Start agent session
    if ./scripts/update-context.sh "$DETECTED_AGENT" session-start "$TASK_DESC" 2>/dev/null; then
        echo "‚úÖ Started session for $DETECTED_AGENT"
        
        # Store current agent for other hooks
        echo "$DETECTED_AGENT" > .claude/current-agent
        echo "$TASK_DESC" > .claude/current-task
    else
        echo "‚ö†Ô∏è  Could not start session for $DETECTED_AGENT"
    fi
fi

# Special handling for testing requests
if [[ "$USER_PROMPT" =~ "test"|"playwright"|"visual regression" ]]; then
    # Ensure Playwright is available
    if ! command -v npx >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Testing tools may not be available - npx not found"
    fi
    
    # Check if test infrastructure exists
    if [[ ! -f "playwright.config.ts" && ! -f "playwright.config.js" ]]; then
        echo "üí° Hint: Playwright config not found - may need setup"
    fi
fi

# Context awareness - check if this might be continuing previous work
if [[ -f ".claude/current-agent" ]]; then
    CURRENT_AGENT=$(cat .claude/current-agent 2>/dev/null || echo "")
    if [[ -n "$CURRENT_AGENT" && -z "$DETECTED_AGENT" ]]; then
        # This might be continuation of work
        if [[ "$USER_PROMPT" =~ "continue"|"next"|"also"|"additionally"|"now" ]]; then
            echo "üîÑ Continuing work with: $CURRENT_AGENT"
            TASK_DESC=$(extract_task_description "$USER_PROMPT")
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "User requested: $TASK_DESC" 2>/dev/null || true
        fi
    fi
fi

# Development environment checks
check_dev_environment() {
    local warnings=()
    
    # Check if Convex is running
    if ! pgrep -f "convex dev" >/dev/null; then
        warnings+=("Convex dev server may not be running")
    fi
    
    # Check for common development issues
    if [[ ! -f ".env" && ! -f ".env.local" ]]; then
        warnings+=("Environment configuration may be missing")
    fi
    
    # Report warnings
    for warning in "${warnings[@]}"; do
        echo "‚ö†Ô∏è  $warning"
    done
}

# Only check environment for development-related prompts
if [[ "$USER_PROMPT" =~ "dev"|"development"|"run"|"start"|"build" ]]; then
    check_dev_environment
fi

# Exit successfully to allow the prompt to proceed
exit 0