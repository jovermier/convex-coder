#!/bin/bash

# Claude Code Session End Hook
# Cleanup and final context updates when session ends

set -e

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
PROJECT_ROOT="/home/coder/convex-coder"

cd "$PROJECT_ROOT"

echo "üëã Session ending at $TIMESTAMP"

# Get current agent if one is active
CURRENT_AGENT=""
CURRENT_TASK=""
if [[ -f ".claude/current-agent" ]]; then
    CURRENT_AGENT=$(cat .claude/current-agent 2>/dev/null || echo "")
fi
if [[ -f ".claude/current-task" ]]; then
    CURRENT_TASK=$(cat .claude/current-task 2>/dev/null || echo "")
fi

# End active agent session
end_agent_session() {
    if [[ -n "$CURRENT_AGENT" ]]; then
        echo "ü§ñ Ending session for agent: $CURRENT_AGENT"
        
        # End the agent session
        if ./scripts/update-context.sh "$CURRENT_AGENT" session-end 2>/dev/null; then
            echo "‚úÖ Agent session ended successfully"
        else
            echo "‚ö†Ô∏è  Could not properly end agent session"
        fi
        
        # Generate session summary
        generate_session_summary "$CURRENT_AGENT" "$CURRENT_TASK"
        
        # Clean up current agent tracking
        rm -f .claude/current-agent .claude/current-task 2>/dev/null || true
    fi
}

# Generate a summary of what was accomplished this session
generate_session_summary() {
    local agent_name="$1"
    local task_description="$2"
    
    echo "üìä Generating session summary for $agent_name"
    
    # Count activities from this session
    local tool_calls=$(grep "$(date '+%Y-%m-%d')" .claude/tool-usage.log 2>/dev/null | wc -l || echo "0")
    local edits=$(grep "$(date '+%Y-%m-%d')" .claude/edit-log.txt 2>/dev/null | wc -l || echo "0")
    
    # Create session summary
    local summary="
#### Session Summary ($(date '+%Y-%m-%d'))
**Task**: $task_description
**Duration**: Session completed at $TIMESTAMP
**Activity**: $tool_calls tool calls, $edits file edits
**Agent**: $agent_name

#### Key Activities
$(tail -n 10 .claude/tool-usage.log 2>/dev/null | grep "$(date '+%Y-%m-%d')" | sed 's/^/- /' || echo '- No recent tool activity recorded')

#### Files Modified  
$(tail -n 10 .claude/edit-log.txt 2>/dev/null | grep "$(date '+%Y-%m-%d')" | sed 's/.*Post-edit: /- /' | sort -u || echo '- No files modified')
"

    # Add summary to agent's work history
    if ./scripts/update-context.sh "$agent_name" add-learning "$summary" 2>/dev/null; then
        echo "‚úÖ Session summary added to $agent_name context"
    fi
}

# Project health check
final_health_check() {
    echo "üè• Running final project health check..."
    
    local issues=()
    
    # Check if TypeScript compiles
    if command -v npm >/dev/null 2>&1 && [[ -f "package.json" ]]; then
        if ! npm run typecheck >/dev/null 2>&1; then
            issues+=("TypeScript compilation errors")
        fi
    fi
    
    # Check if Convex is in a good state
    if [[ -d "convex" ]]; then
        if ! find convex -name "*.ts" -exec grep -l "export.*=" {} \; >/dev/null 2>&1; then
            issues+=("Convex functions may have export issues")
        fi
    fi
    
    # Check for common problems
    if [[ -f ".env.example" && ! -f ".env" ]]; then
        issues+=("Environment configuration may be missing")
    fi
    
    # Report issues
    if [[ ${#issues[@]} -gt 0 ]]; then
        echo "‚ö†Ô∏è  Project health issues detected:"
        printf '  - %s\n' "${issues[@]}"
        
        # Add to current agent context if available
        if [[ -n "$CURRENT_AGENT" ]]; then
            for issue in "${issues[@]}"; do
                ./scripts/update-context.sh "$CURRENT_AGENT" add-todo "Fix: $issue" 2>/dev/null || true
            done
        fi
    else
        echo "‚úÖ Project appears to be in good health"
    fi
}

# Cleanup and prune context
cleanup_session_files() {
    echo "üßπ Cleaning up session files..."
    
    # Run context pruning if agent was active
    if [[ -n "$CURRENT_AGENT" ]]; then
        echo "‚úÇÔ∏è  Pruning context for $CURRENT_AGENT to prevent overflow..."
        if node scripts/context-pruner.js prune "$CURRENT_AGENT" 2>/dev/null; then
            echo "‚úÖ Context pruned successfully"
        else
            echo "‚ö†Ô∏è  Could not prune context"
        fi
    fi
    
    # Rotate logs if they get too large
    if [[ -f ".claude/tool-usage.log" ]]; then
        local log_size=$(wc -l < .claude/tool-usage.log 2>/dev/null || echo "0")
        if [[ $log_size -gt 1000 ]]; then
            tail -n 500 .claude/tool-usage.log > .claude/tool-usage.log.tmp
            mv .claude/tool-usage.log.tmp .claude/tool-usage.log
            echo "üìú Rotated tool usage log"
        fi
    fi
    
    if [[ -f ".claude/edit-log.txt" ]]; then
        local edit_log_size=$(wc -l < .claude/edit-log.txt 2>/dev/null || echo "0")
        if [[ $edit_log_size -gt 500 ]]; then
            tail -n 250 .claude/edit-log.txt > .claude/edit-log.txt.tmp
            mv .claude/edit-log.txt.tmp .claude/edit-log.txt
            echo "üìú Rotated edit log"
        fi
    fi
    
    # Clean up any backup files older than 7 days
    find . -name "*.backup.*" -type f -mtime +7 -delete 2>/dev/null || true
}

# Generate development insights
generate_insights() {
    echo "üß† Generating development insights..."
    
    # Most used tools
    local top_tools=$(tail -n 50 .claude/tool-usage.log 2>/dev/null | cut -d']' -f2 | cut -d':' -f2 | sort | uniq -c | sort -nr | head -3)
    
    # Most edited files
    local top_files=$(tail -n 50 .claude/edit-log.txt 2>/dev/null | grep "Post-edit:" | awk '{print $NF}' | xargs -I {} basename {} | sort | uniq -c | sort -nr | head -3)
    
    if [[ -n "$top_tools" || -n "$top_files" ]]; then
        local insights="
### Development Insights ($(date '+%Y-%m-%d'))

#### Most Used Tools:
$top_tools

#### Most Edited Files:
$top_files

#### Session Activity:
- Session ended at: $TIMESTAMP
- Current agent: ${CURRENT_AGENT:-"None"}
- Task focus: ${CURRENT_TASK:-"General development"}
"
        
        echo "$insights" >> .claude/insights.md
        echo "üí° Development insights saved"
    fi
}

# Suggest next steps
suggest_next_steps() {
    if [[ -n "$CURRENT_AGENT" ]]; then
        echo "üöÄ Suggested next steps for $CURRENT_AGENT:"
        
        # Read current todos for this agent
        if [[ -f "context/$CURRENT_AGENT/todo-future.md" ]]; then
            local next_todos=$(grep "- \[ \]" "context/$CURRENT_AGENT/todo-future.md" | head -3 | sed 's/- \[ \]/  ‚Ä¢/')
            if [[ -n "$next_todos" ]]; then
                echo "$next_todos"
            else
                echo "  ‚Ä¢ Review and update context for next session"
            fi
        fi
    else
        echo "üí° Consider using agent commands for more structured development:"
        echo "  ‚Ä¢ @feature-complete <feature-name> - End-to-end feature development"
        echo "  ‚Ä¢ @test-comprehensive - Comprehensive testing suite"  
        echo "  ‚Ä¢ @health-check - System diagnostics and optimization"
    fi
}

# Main session end flow
main() {
    echo "Session Log: $TIMESTAMP - Session ending" >> .claude/session.log
    
    # End active agent session
    end_agent_session
    
    # Run final health check
    final_health_check
    
    # Generate insights
    generate_insights
    
    # Cleanup
    cleanup_session_files
    
    # Provide next steps
    suggest_next_steps
    
    echo "üëã Session ended successfully. Context preserved for next time!"
}

# Run main session end flow
main

# Exit successfully
exit 0