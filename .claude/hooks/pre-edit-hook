#!/bin/bash

# Claude Code Pre-Edit Hook
# Quality gates and validation before file modifications

set -e

FILE_PATH="$1"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
PROJECT_ROOT="/home/coder/convex-coder"

cd "$PROJECT_ROOT"

# Get current agent if one is active
CURRENT_AGENT=""
if [[ -f ".claude/current-agent" ]]; then
    CURRENT_AGENT=$(cat .claude/current-agent 2>/dev/null || echo "")
fi

echo "🔍 Pre-edit validation for: $FILE_PATH"

# Critical file protection
protect_critical_files() {
    local file_path="$1"
    
    # Protect package.json from dangerous changes
    if [[ "$file_path" =~ "package.json" ]]; then
        echo "⚠️  Modifying package.json - ensuring backup exists"
        cp "$file_path" "${file_path}.backup.$(date +%s)" 2>/dev/null || true
    fi
    
    # Protect Convex schema files
    if [[ "$file_path" =~ "convex/schema.ts" ]]; then
        echo "⚠️  Modifying Convex schema - this affects database structure"
        if [[ -n "$CURRENT_AGENT" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Modified Convex schema - may require database migration" 2>/dev/null || true
        fi
    fi
    
    # Protect configuration files
    if [[ "$file_path" =~ "\.config\.|tsconfig|vite\.config|playwright\.config" ]]; then
        echo "⚠️  Modifying configuration file - may affect build process"
    fi
}

# TypeScript validation for .ts/.tsx files
validate_typescript() {
    local file_path="$1"
    
    if [[ "$file_path" =~ \.(ts|tsx)$ ]]; then
        echo "📝 TypeScript file detected - will validate after edit"
        
        # Check if TypeScript compiler is available
        if command -v npx >/dev/null 2>&1 && [[ -f "tsconfig.json" ]]; then
            # We'll validate after the edit, but prepare for it
            echo "✅ TypeScript validation available"
            return 0
        else
            echo "⚠️  TypeScript validation not available"
            if [[ -n "$CURRENT_AGENT" ]]; then
                ./scripts/update-context.sh "$CURRENT_AGENT" add-problematic-command "TypeScript validation unavailable" 2>/dev/null || true
            fi
        fi
    fi
}

# React component specific validations
validate_react_component() {
    local file_path="$1"
    
    if [[ "$file_path" =~ components/.*\.(tsx|jsx)$ ]]; then
        echo "⚛️  React component file detected"
        
        # Check if this is a new component or modification
        if [[ -f "$file_path" ]]; then
            echo "📝 Modifying existing React component"
        else
            echo "✨ Creating new React component"
        fi
        
        # Ensure component follows project patterns
        if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "react-convex-builder" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Working on React component: $(basename "$file_path")" 2>/dev/null || true
        fi
    fi
}

# Convex function validations
validate_convex_functions() {
    local file_path="$1"
    
    if [[ "$file_path" =~ ^convex/.*\.ts$ ]]; then
        echo "🔄 Convex function file detected"
        
        # Check if Convex dev server might need restart
        if pgrep -f "convex dev" >/dev/null; then
            echo "✅ Convex dev server is running"
        else
            echo "⚠️  Convex dev server may not be running - changes might not be reflected"
        fi
        
        if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "convex-function-generator" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Working on Convex function: $(basename "$file_path")" 2>/dev/null || true
        fi
    fi
}

# Test file validations
validate_test_files() {
    local file_path="$1"
    
    if [[ "$file_path" =~ test|spec|\.test\.|\.spec\. ]]; then
        echo "🧪 Test file detected"
        
        # Check if testing infrastructure is available
        if [[ -f "playwright.config.ts" || -f "playwright.config.js" ]]; then
            echo "✅ Playwright testing infrastructure available"
        else
            echo "💡 Hint: Playwright config not found - may need setup for testing"
        fi
        
        if [[ -n "$CURRENT_AGENT" && "$CURRENT_AGENT" == "web-testing-specialist" ]]; then
            ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "Working on test file: $(basename "$file_path")" 2>/dev/null || true
        fi
    fi
}

# Agent context integration
update_agent_context_pre_edit() {
    local file_path="$1"
    
    if [[ -n "$CURRENT_AGENT" ]]; then
        # Record what type of file is being edited
        local file_type="unknown"
        case "$file_path" in
            *.tsx|*.jsx) file_type="React component" ;;
            *.ts) 
                if [[ "$file_path" =~ ^convex/ ]]; then
                    file_type="Convex function"
                else
                    file_type="TypeScript file"
                fi ;;
            *.js) file_type="JavaScript file" ;;
            *.json) file_type="Configuration file" ;;
            *test*|*spec*) file_type="Test file" ;;
            *.md) file_type="Documentation" ;;
        esac
        
        ./scripts/update-context.sh "$CURRENT_AGENT" add-learning "About to edit $file_type: $(basename "$file_path")" 2>/dev/null || true
    fi
}

# Directory-specific validations
validate_by_directory() {
    local file_path="$1"
    
    case "$file_path" in
        src/components/*)
            echo "📁 Editing in components directory"
            ;;
        convex/*)
            echo "📁 Editing in Convex backend directory"
            ;;
        tests/*|test/*)
            echo "📁 Editing in tests directory"
            ;;
        .claude/*)
            echo "📁 Editing Claude Code configuration"
            echo "⚠️  Be careful with Claude Code settings"
            ;;
        scripts/*)
            echo "📁 Editing project scripts"
            ;;
        context/*)
            echo "📁 Editing agent context"
            echo "🤖 Agent context modification detected"
            ;;
    esac
}

# Main validation flow
main() {
    local file_path="$1"
    
    echo "[$TIMESTAMP] Pre-edit validation: $file_path" >> .claude/edit-log.txt
    
    # Run all validations
    protect_critical_files "$file_path"
    validate_typescript "$file_path"
    validate_react_component "$file_path"
    validate_convex_functions "$file_path"
    validate_test_files "$file_path"
    validate_by_directory "$file_path"
    update_agent_context_pre_edit "$file_path"
    
    echo "✅ Pre-edit validation completed for: $file_path"
}

# Run main validation
main "$FILE_PATH"

# Exit successfully to allow the edit to proceed
exit 0